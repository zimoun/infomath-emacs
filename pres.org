# mode: org ; coding: utf-8
#+STARTUP: content indent hideblocks
#+TAGS:    config(c) LIVE(l) noexport(n)

#+REVEAL_THEME: sky
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_HLEVEL:      2
# #+REVEAL: split
#+REVEAL_EXTRA_CSS: ./custom.css

#+TITLE: Deal with Emacs
#+AUTHOR: simon
#+DATE:   Nov. 22, 2018
#+EMAIL:  simon.tournier@univ-paris-diderot.fr

#+OPTIONS: toc:nil
#+OPTIONS: author:t date:t email:nil
#+OPTIONS: reveal_slide_number:nil num:nil


* README                                                           :noexport:
** Hack to tell you to read the next subsections :-)

Go to the next subsection about General conventions.

# :exports none should be removed since the section is :noexports:
#+BEGIN_SRC org :tangle README.org :exports none


  [[https://zimoun.github.com/infomath-emacs/pres.html][The presentation is served there.]]

  --


  Open the file =pres.org= with Emacs:

   1) Copy the proposed =init.el= file in the hidden directory =$HOME/.emacs.d/=
   2) Start Emacs (click somewhere depending on your OS/distribution)
   3) Go to /File->Visit File/ and reach =pres.org=
   4) Move the cursor down with the Arrow
   5) In front of the section README, press TAB
   6) The section is expanded
   7) Move down in front of #+BEGIN_SRC, press TAB
   8) The block is expanded
   9) Press TAB again, the block is collapsed
   10) Move the cursor to the header of a subsection
   11) Press TAB, the subsection is expanded
   12) Press TAB again, the subsection is collasped
   13) Cycle with Shift+TAB
   14) Read, Try, Fail, Try again, and be patient :-)

  The presentation and =pres.org= are an pedestrian attempt of an Emacs's
  discovery. So please email me or open an issue.


  The presentation is served [[https://zimoun.github.com/infomath-emacs/pres.html][there]].

  ,*Note* that some images point to non-secure =http= (i.e., not
  =https=). Maybe, your web-browser needs to allow non-secure connections
  (see address bar, lock icons, turn on/off) to display the presentaion.


  --


  Email me or open an issue if something does not work.
#+END_SRC

** General conventions

Emacs heavily uses the Control key and the Alt key. The shortcuts are
combinations of press Control or Alt and in the same time press other keys.

*** How to use Control key: example

For example, the shortcut to go at the beginning of the current line
is press Control and continuing to press Control you also press a.
Move with the arrows the cursor here. Try!

For example, the shortcut to quit Emacs is press Control and
continuing to press Control you press x, then you again press Control
and continuing to press Control you also press c. Try... bye. :-)

*** Convention about Control key

The convention to document these shortcuts is:

- C-a which means press Control and a in the same time.
- C-x C-c which press Control and x in the same time, then Control and c
  again in the same time.

*** How to use Alt key: example

It is exactly the same principle for Alt.

For example, the shortcut to move backward a word is press Alt and
continuing to press Alt you also press b.

For example, press Alt and continuing to press Alt you also press
x. Then type beginning-of-line, following by Enter. Magic, isn't? :-)

*** Convention about Alt key

The convention used elsewhere is:

- M-b which means press Alt and b in the same time
- M-x beginning-of-line which means press Alt and x in the same time,
  then type beginning-of-line, followed by Enter.

The letter M comes from Meta, the old name on old keyboards.

*Note:* that you can also use Esc as Meta key. In other words, the shortcut
M-b means: press Alt and b _or_ press Esc and b.

** Export all the files used to show off

To ease the first experience, all the files are included in the
repository. However, all these files are generated by this document.
They are described by the blocks #+BEGIN_SRC ... #+END_SRC.

If you want to generate them, you will use org-babel. It is as simply as
the sequence: Control c Control v t or in short C-c C-v t.

** Export the presentation: Org->HTML with Reveal.js

*** *Warning* about Reveal.js

The framework Reveal.js is a moving target. Therefore what is working today may
not work in the near future. Mainly, two sources of issues:
 1. CDN: see #+REVEAL_ROOT; which could point to deleted URL
 2. ox-reveal: hard to keep up-to-date the exporter with Emacs, Org and
    Reveal.js versions

If one consider long term support of the material, then one should consider to
carefully track the Git commit of both Reveal.js and ox-reveal.

Else, say that Reveal.js presentations is one shot presentation (junk
presentation; junk as in junk food.)

The default parameters change and if the result is not compliant with the
expectations (font size, etc.) then an additional file tune them;
see #+REVEAL_EXTRA_CSS.

Last, the highlighting colours of the Emacs theme are used when
exporting. Therefore, the last export before publishing must be done with the
right Emacs theme---the default one seems well adapted; be careful to which
highlighting colours are loaded, e.g., the option =-nw= changes the output---and
the easiest way is to use this command line:
#+begin_src shell
  emacs -Q                           \
        pres.org                     \
        -l make.el                   \
        -f org-reveal-export-to-html \
        --kill
#+end_src

#+RESULTS:

The order of the arguments matters:
  1. do not load all the user's configuration
  2. open the file pres.org
  3. load the file make.el and evaluate the ELisp
     #+name: make.el
     #+begin_src elisp :tangle make.el
       (defvar ox-reveal-path
         (expand-file-name "elpa/org-reveal.git" user-emacs-directory))
       (defvar htmlize-path
         (expand-file-name "elpa/htmlize.git" user-emacs-directory))

       (defun git-clone (from to)
         (when (not (file-directory-p to))
             (shell-command (format
                             "git clone %s %s" from to))))

       (git-clone "https://github.com/yjwen/org-reveal.git" ox-reveal-path)
       (git-clone "https://github.com/emacsmirror/htmlize.git" htmlize-path)


       (add-to-list 'load-path ox-reveal-path)
       (add-to-list 'load-path htmlize-path)

       (require 'ox-reveal)
     #+end_src
  4. apply the function org-reveal-export-to-html
  5. close Emacs.
The file make.el is a tiny file containing helpful paths: where org-reveal and
htmlize are located.

*** Check your version of Emacs

Check your version of Emacs, choose a method:
1. Open Emacs, then press Alt and x and type version
   In short: M-x version
   (see above about the General conventions)
2. Open a Terminal, then type: emacs -version

*** Emacs >= 26

If the version is upper than 26, nothing to do and it should work
out-of-box. Otherwise, email me!

*** Emacs < 26

If the version is lower than 26, then the built-in version of Org-mode
does not work with Reveal.js.
See the issue 324: [[https://github.com/yjwen/org-reveal/issues/324][https://github.com/yjwen/org-reveal/issues/324]]
One fix is below.

**** Clone the org+reveal repository

1. Open a Terminal
2. Create the right folders, by typing
   mkdir -p ~/.emacs.d/elpa
3. Clone the repo by typing
   git clone https://github.com/yjwen/org-reveal.git ~/.emacs.d/elpa/org-reveal.git

If you use Windows, then please consider using Linux (or at least MacOS).

**** Add init.el to your Emacs directory ~/.emacs.d/

#+NAME: ox-reveal
#+BEGIN_SRC elisp

  ;;;;
  ;;
  ;; Set Org and Reveal.js
  ;;
  ;; WARNING: issue with Org 8.2
  ;; Not sure this code fixed the issue
  ;; The idea is:
  ;; 1. Trick from https://github.com/jwiegley/use-package/issues/319
  ;;    Download the newer version of Org by ensuring org-plus-contrib
  ;; 2. DO NOT FORGET to manually clone org-reveal from Github
  ;;    Put it somewhere and give this inforamtion to :load-path
  ;; 3. Done.
  ;;
  ;; General config about Org
  ;; This can be reused if even yo do not use Reveal.js
  (use-package org
    :ensure org-plus-contrib		; tricks!
                                        ; ensure the last version of Org
    :defer t
    :config
    (setq org-hide-emphasis-markers t)
    ;; hook to limit the number of characters per line
    ;; this number is controled by the variable fill-column
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (setq org-src-fontify-natively t)	; coloring   inside blocks
    (setq org-src-tab-acts-natively t)	; completion inside blocks
    (setq org-tag-faces
          '(
            ("config" . (:foreground "mediumseagreen" :weight bold))
            ("LIVE" . (:foreground "Red" :underline t))
            ))

    ;; execute blocks (can be reused if even you do not use Reveal.js)
    (org-babel-do-load-languages
     'org-babel-load-languages '((python . t)
                                 (R . t)
                                 (shell . t)))
    ;; do not ask before eval code blocks
    (setq org-confirm-babel-evaluate nil)

    ;; store time when TODO is DONE
    (setq org-log-done (quote time)))

  ;; https://github.com/yjwen/org-reveal/issues/324
  (setq ox-reveal-path "~/.emacs.d/elpa/org-reveal.git")
  (if (file-directory-p ox-reveal-path)
      ;; then-clause
      (use-package ox-reveal
        :load-path ox-reveal-path
        :init
        ;; always load ox-reveal at startup
        ;; comment this line if you want not
        ;; but do not forget to load it manually M-: (require 'ox-reveal)
        (require 'ox-reveal))
    ;; else-clause
    (warn
     (format "Cannot load org exporter to Reveal.js.\nFix two steps: 1) Clone and 2) Reload.\n\ngit clone https://github.com/yjwen/org-reveal.git %s\n\nM-x load-file \"~/.emacs.d/init.el\"" ox-reveal-path)))
  ;;
  ;; ;end Reveal.js
  ;;
  ;;;;

  ;;;;
  ;;
  ;; Set syntax coloring
  ;;
  (use-package htmlize
    :ensure t
    :defer t)
  ;;
  ;; ;end
  ;;
  ;;;;
#+END_SRC

*** Load manually the Org-mode module of Reveal.js

1. Start Emacs
   If you use the init.el file, then the exporter is already loaded.
   Else go to 2.

2. Press Alt :
   In short: M-:

3. Type (require 'ox-reveal)

(see above about the General conventions)

*** Export as any exporter

1. Press Control c then Control e
2. Press Shift R Shift R (twice)

In short: C-c C-e R R
(see above about the General conventions)

** Script to copy config                                            :config:

#+BEGIN_SRC shell :tangle config-me.sh
  mkdir -p ~/.emacs.d/snippets
  cp init.el ~/.emacs.d/
  cp -R eg/snippets/* ~/.emacs.d/snippets/
#+END_SRC

* From where I talk ?

*** Who I am ?

 - Mainly a geek guy
 - Research Engineer at Univ. Paris 7 Diderot
 -
   + Post-Doc Católica (Chile)
   + Post-Doc Univ. Liège (/hi Berty!/)
   + PhD at ONERA Toulouse

#+BEGIN_QUOTE
=simon.tournier@univ-paris-diderot.fr=

[[https://github.com/zimoun][https://github.com/zimoun]]
#+END_QUOTE

*** My life

 - 2006-2010: Vim user... and happy!
 - 2011 New Year Resolutions: [[https://www.youtube.com/watch?v=JWD1Fpdd4Pc][Switch]] [[https://upsilon.cc/~zack/blog/posts/2008/11/from_Vim_to_Emacs_-_part_2/][to Emacs]] (video)

   $\Rightarrow$ because the /sysadmin/ showed me crazy stuff

   && *he helped me to start*.

#+BEGIN_QUOTE
I am only an enthusiast user, not a guru
#+END_QUOTE

*** My typical use-cases

 - Edit multiple /languages/:
   Python, Julia, C/C++, (Fortran), R, Shell, $\LaTeX$, Haskell, Scheme, etc.
 - Git (pull, commit, merge)
 - Organize my tasks and log them
 - Write docs and few papers, compose "workflow"

# Create the folder named 'eg/elisp' from the current folder '.'
# Then tangle/export inside
#+NAME: ask-at-point
#+BEGIN_SRC elisp :tangle (prog1 "eg/elisp/some-code.el" (make-directory "eg/elisp" "."))
  (defun ask-at-point (&optional i-know)
    "Feel free to ask everything."
    (interactive "P")
    (if i-know (message "Quick Answer.")
     (browse-url
      (concat "https://www.ddg.gg/?q=emacs+" (thing-at-point 'symbol)))))
#+END_SRC

* Contents

 1. Quick Intro to Emacs
 2. How to configure: [[https://github.com/jwiegley/use-package][use-package]]
 3. Quick Demo:
    + $\LaTeX$
    + Python
 4. Goodies
 5. [[https://orgmode.org][Org-mode]]: markdown on steroid
 6. A bit of [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Emacs Lisp]] ([[https://www.youtube.com/watch?v=RtvlBS4PMF0][power to the people]])
    + just for fun: [[https://github.com/zimoun/elfem1][mini fem solver inside Emacs]]

* What Emacs is ?

*** Definition

Emacs is a *User Interface* (UI) to manipulate text

 - [[https://www.gnu.org/software/emacs/][Editor]]
 - IDE for a lot of languages ([[http://cedet.sourceforge.net][CEDET]], [[https://common-lisp.net/project/slime/][SLIME]], [[http://www.nongnu.org/geiser/][Geiser]], [[https://tkf.github.io/emacs-ipython-notebook/][EIN]])
 - [[https://notmuchmail.org/notmuch-emacs/][Mail Reader]], [[https://www.gnu.org/software/emacs/manual/html_node/gnus/][Mail Reader]], [[https://github.com/skeeto/elfeed][RSS Reader]], etc.
 - [[https://en.wikipedia.org/wiki/Lisp_machine][Extensible Lisp machine]]?
 - [[https://github.com/ch11ng/exwm][Windows Manager]]?
 - [[http://doc.rix.si/cce/cce.html][OS]]? :-)

*** Theorem

#+BEGIN_QUOTE
All what X is able, Emacs does it too.
#+END_QUOTE

*Proof*: Let as an exercise after this presentation.

*** Corollary

#+ATTR_HTML: :width 50%
[[https://i.redd.it/l58yl5wh6fk11.png]]

*** (counter) Example

 Start Emacs

*** How you feel when you start

#+ATTR_HTML: :alt image :style float:left :width 40%
https://www.woodbrass.com/images/SQUARE400/woodbrass/EAGLETONE+BLADE.JPG
#+ATTR_HTML: :alt image :style float:right :width 40%
http://drumshop.ru/i/1/3/13dda81c116fcdba42d29d63d4d29a3bm.jpg

*** Weirdness comes from Oldness

#+BEGIN_QUOTE
Initial release: 1976; 42 years ago ([[https://www.jwz.org/doc/emacs-timeline.html][timeline]])
#+END_QUOTE

- Macintosh : [[https://en.wikipedia.org/wiki/Macintosh][1984]]

  First mass-market computer with GUI and mouse

- Windows 1.0: [[https://en.wikipedia.org/wiki/Windows_1.0#cite_note-alsop19880118-4][1985]]

  (claim starting dev. GUI in 1981)

*** A window is not a window

- /"Frames"/ are to Emacs what windows are to everything else
- /"Windows"/ are subdivisions of frames
- /"Buffer"/ hold the content of a file

  "Open a file" means open a buffer that "visits" that file

#+ATTR_HTML: :width 50%
https://i.stack.imgur.com/SAJFO.jpg

*** Control C is not Copy

#+BEGIN_QUOTE
C-x C-f means

press Control and x then Control and f

M-x means press Alt and x
#+END_QUOTE


| Copy         | C-w |
| Paste        | C-y |
| Cut          | M-w |
| Find         | C-s |
| Find-Replace | M-% |

*** Ah Bon?

http://blog.zepyaf.com/wp-content/uploads/2011/12/Capture-d’écran-2011-12-21-à-09.54.32.png

*** Keep Calm and Practise

http://www.starsportsbet.co.uk/wp-content/uploads/2015/11/garyplayer.jpg

**** Show me                                               :LIVE:noexport:
:PROPERTIES:
:CUSTOM_ID: tuto
:END:

The included TUTORIAL is a good start. To open it: =C-h t=

* Some basics

** Ressources

- [[https://www.gnu.org/software/emacs/tour/][https://www.gnu.org/software/emacs/tour/]]
- https://www.tuteurs.ens.fr/unix/editeurs/emacs.html
- [[http://ergoemacs.org/emacs/emacs.html][http://ergoemacs.org/emacs/emacs.html]]

*** [[http://sachachua.com/blog][sachachua.com/blog]]

http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs-v2-Large.png

*** [[http://sachachua.com/blog/about][sachachua.com/blog]] 2

#+ATTR_HTML: :width 75%
http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs8.png

*** Refcard

https://www.gnu.org/graphics/gnuemacsref.png
https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf

** A demo speaks better than words

@simon: check your cheatsheet :-)

**** Show me                                               :LIVE:noexport:
:PROPERTIES:
:CUSTOM_ID: common
:END:

#+BEGIN_SRC text :tangle (prog1 "eg/simple.txt" (make-directory "eg/" ".")) :exports none
  One Sample.

  foo bar baz
  banana ananas apple
  car bus train
  flip flop yeah

  1	&  2	& 3
  10	& 20	& 30
  100	& 200	& 300
  0.1	& 0.2	& 0.3
#+END_SRC

How to change the background color and the selected region:
1) =M-x set-background-color=
2) =(set-face-attribute 'region nil :background "yellow")=

--

+ GUI
+ Write text
+ Options->CUA
+ Options->Customize
+ Change theme =M-x load-theme leuven=
+ Mouse is allowed
+ Shortcut is Command =C-h k=
+ List all the shortcuts =C-h m=
+ Panic quit: =C-g= several times
+ Move (word, line), up down =C-v=, =M-v=, =C-l=
+ Move paragraph =M-{=, =M-}=
+ Beginning/end of line
+ Move sentence =M-a=, =M-e=
+ Mark =C-SPC=
+ Kill, Paste, Kill-ring
+ Kill/paste rectangle =C-x r k= / =C-x r y=
+ Undo =C-_= or =C-x u=
+ Copy text from Web, then justify =M-q=
+ Search, Regex search =C-u C-s=
+ Completion =M-/=
+ Split screen (window) =C-x 2= / =C-x 3=
+ Minibuffer: =M-x command=
+ =M-x split-window-below=
+ =M-x linum-mode=
+ =M-x whitespace-mode=
+ =M-x hl-line-mode=
+ =M-x sort-lines= / =M-x reverse-region=
+ =M-x align-regexp=
+ Macro
  1. =C-x (= do actions =C-x )=
  2. Apply =C-x e=
  3. Save it: =C-x name-last-kbd-macro=
     with a funky name
  4. Call it: =M-x funky-name=

** Summary

#+BEGIN_QUOTE
"Habit is habit, and not to be flung out of the window by any man, but
coaxed downstairs a step at a time."
-- Mark Twain
#+END_QUOTE

*** Remember

- Keyboard driven (source of power)
- *Command* is first class citizen
- one /command/ should be binded to one *Keymap*

|-------------------+-------|
| describe-key      | C-h k |
| describe-function | C-h f |
| describe-mode     | C-h m |
| ...               | ...   |
| isearch-forward   | C-s   |

*** Remember 2

| find-file      | C-x C-f |
| set-mark       | C-SPC   |
| kill-ring-save | M-w     |
| kill-region    | C-w     |
| yank           | C-y     |
| ...            | ...     |
I DO NOT recommand [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA-mode]] (windows-like shortcuts)

*** Remember 3

#+BEGIN_QUOTE
Muscle one small step after another
#+END_QUOTE
https://as2.ftcdn.net/jpg/00/93/86/03/500_F_93860366_VpWf1VVnEGzVQwCeHTOsPLrvNHEfGOdb.jpg

* How to configure

The configuration is driven by
#+BEGIN_QUOTE
=$HOME/.emacs.d/init.el=
#+END_QUOTE

#+NAME: initial-comment
#+BEGIN_SRC elisp :tangle init.el :exports none

;;;;
;;
;; Basics example of configuration file
;;
;; mkdir -p $HOME/.emacs.d
;; mv init.el $HOME/.emacs.d/init.el
;;
;;;;

#+END_SRC

** Basics

*** Basics 1

Set variables
#+BEGIN_SRC elisp
  ;; to see the life in colours
  (global-font-lock-mode 1)
  ;; to remove the icons bar
  (tool-bar-mode 0)
  ;; what?!? who use the latteral bar to scroll ? :-)
  (scroll-bar-mode 0)
#+END_SRC
Set other variables
#+NAME: initial-message
#+BEGIN_SRC elisp :tangle init.el
  ;; remove the initial starting message
  (setq inhibit-startup-message t)

  ;; delete the *scratch* initial message
  (setq initial-scratch-message nil)
#+END_SRC

@simon: quick demo-it

**** Show me                                               :LIVE:noexport:

- Open init.el
- Type =(scroll-bar-mode 0)=
- GUI Eval Defun
- Change 0 to 1
- Eval again
- Show help: =C-h f= scroll-bar-mode
- Do it with =(tool-bar-mode 0)=
- Write =(setq inhibit-startup-message t)=
- Close Emacs and reopen Emacs
- Show help: =C-h v inhibit-startup-message=
- Do again with =(setq initial-scratch-message nil)=

*** Basics 2

Conditional set
#+NAME: menu-bar
#+BEGIN_SRC elisp :tangle init.el
  ;; remove the menu when inside terminal
  (if (display-graphic-p)
      (menu-bar-mode 1)
    (menu-bar-mode 0))
#+END_SRC
Rename commands
#+NAME: defalias
#+BEGIN_SRC elisp :tangle init.el
  ;; simplify the question-answer process
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; M-x mode-* instead of the long name
  (defalias 'mode-whitespace 'whitespace-mode)
  (defalias 'mode-highlight 'global-hl-line-mode)
#+END_SRC
#+BEGIN_SRC elisp
  ;; change the default file manager
  (defalias 'list-directory 'dired)
#+END_SRC

*** Basics 3

Bind
#+NAME: global-set-key
#+BEGIN_SRC elisp :tangle init.el
  ;; set global shortcuts
  (global-set-key [?\C-k] 'kill-whole-line)
  (global-set-key [?\C-$] 'ispell-region)
#+END_SRC

#+BEGIN_SRC elisp
  ;; special binding for specific mode (here dired)
  (define-key dired-mode-map (kbd "E") 'dired-toggle-read-only))
#+END_SRC

Hook
#+NAME: hook
#+BEGIN_SRC elisp :tangle init.el
;; delete dirty spaces
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** A journey of a thousand miles begins with a single step

https://i.pinimg.com/originals/a9/6f/db/a96fdbb368f4b75e4feccbece41721f2.jpg
# *** Where is your towel ?
# https://i.pinimg.com/originals/5d/c5/c9/5dc5c97885ff8087294a06c74d51167f.png

**** Config more                                         :config:noexport:

#+NAME: various-useful
#+BEGIN_SRC elisp :tangle init.el :exports none
  ;; highlight the selected area
  (setq transient-mark-mode t)
  ;; change the default color of the selected area
  (set-face-attribute 'region nil :background "yellow")

  ;; manipulate more easily Buffers
  (ido-mode 'buffers)

  ;; instead of filename.extension~ in the working directory
  ;; all the backup files (suffix ~) are stored there
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )

  ;; set the maximum character per line
  ;;  used by minor mode  (fill-mode)
  (setq-default fill-column 80)

  ;; display the number of the column
  (column-number-mode t)

  ;; save minibuffer history
  (savehist-mode 1)

  ;; the nice buffers manager
  (require 'ibuffer)
  ;; change the default one to ibuffer
  (defalias 'list-buffers 'ibuffer)
  ;; group buffers
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Dired" (mode . dired-mode))
                 ("(La)TeX" (or
                             (mode . tex-mode)
                             (mode . latex-mode)
                             ))
                 ("Lisp" (or
                          (mode . lisp-mode)
                          (mode . emacs-lisp-mode)
                          (mode . scheme-mode)
                          ))
                 ("MaGit" (name . "\*magit"))
                 ("Org" (mode . org-mode))
                 ("Py" (mode . python-mode))
                 ("emacs" (or
                           (name . "^\\*[a-zA-Z ]*\\*$")))))))
  ;; setup the groups
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (setq-local case-fold-search nil)
              (ibuffer-switch-to-saved-filter-groups "default")))
  ;; sort buffer in each group in alphabetic order
  (setq ibuffer-default-sorting-mode 'alphabetic)


  ;; change theme (I personally use the default one)
  ;; (load-theme 'leuven)
  ;; or download one from the web
  ;; (use-package zenburn
  ;;   :ensure t
  ;;   :init
  ;;   (load-theme 'zenburn))
#+END_SRC

** Packages

#+BEGIN_QUOTE
"The coolest feature of Emacs is all the available packages."
-- Doctor Who, the coolest nerd ever
#+END_QUOTE

Repos: [[https://elpa.gnu.org][ELPA]] and [[https://melpa.org/#/][MELPA]]

*** Built-in since Emacs 24

#+NAME: require-package
#+BEGIN_SRC elisp :tangle init.el
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               ;; `use-package' is not in ELPA, as many more ;-)
               '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives
                 ;; Add org-plus-contrib
                 '("org" . "http://orgmode.org/elpa/"))
  (package-initialize)
#+END_SRC
#+BEGIN_QUOTE
=M-x package-list-packages=
#+END_QUOTE

*** [[https://github.com/jwiegley/use-package][use-package]]

#+NAME: use-package
#+BEGIN_SRC elisp :tangle init.el
  ;; boostrap `use-package' by John Wiegley
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  ;; load it
  (require 'use-package)
#+END_SRC
Example:
#+NAME: dired
#+BEGIN_SRC elisp :tangle init.el
  ;; change the default file manager
  (use-package dired
    :defer t
    :init
    (defalias 'list-directory 'dired)
    :config
    (define-key dired-mode-map (kbd "E") 'dired-toggle-read-only))
#+END_SRC

*** use-package 2

#+NAME: ess-julia
#+BEGIN_SRC elisp :tangle init.el
  ;; example of Julia configuration
  (use-package ess
    :ensure t
    :defer t
    ;; :init	                            ; example with non-standard loc.
    ;; (setq inferior-julia-program
    ;; 	"/Applications/Julia-0.6.app/Contents/Resources/julia/bin/julia")
    :mode (("\\.jl\\'" . ess-julia-mode))
    :defines ess-indent-offset            ; silent warning
    :config
    (require 'ess-julia)
    (require 'ess-utils)
    (setq ess-eval-visibly-p nil)
    (setq ess-use-eldoc'script-only))
#+END_SRC

**** Config all unshown tangled here                     :config:noexport:

#+NAME: last
#+BEGIN_SRC elisp :noweb yes :tangle init.el :exports none

  ;;;;
  ;;
  ;; Move automatic custom to special file
  ;;;; avoid to pollute this file
  ;;;; and custom.el is not versionned
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load-file custom-file))
  ;;
  ;;;;

  <<config-latex>>

  <<config-python>>

  <<config-lisp>>

  <<ediff>>

  <<magit>>

  ;;;;
  ;;
  ;; Below is not minimal
  ;;
  ;;

  <<ox-reveal>>
  <<command-log>>
#+END_SRC

*** Yes, it's awesome!

https://pics.me.me/that-awesome-moment-doctor-who-and-the-ta-r-d-is-when-you-34353243.png

* Two live Examples

#+NAME: command-log
#+BEGIN_SRC elisp :exports none
  ;; useful to demo (log all the keystrokes)
  (use-package command-log-mode
    :ensure t
    :defer t
    :init
    ;; comment the line to not load globally command-log-mode
    (setq command-log-mode-is-global t)   ; turn off by replacing t with nil

    (defalias 'mode-command-log 'command-log-mode)
    (defalias 'command-log-show '(lambda (&optional arg)
                                   (interactive "P")
                                   (progn
                                     (command-log-mode)
                                     (message "Alias of clm/open-command-log-buffer. See M-x clm/TAB.")
                                     (clm/open-command-log-buffer arg))))
    (add-hook 'LaTeX-mode-hook 'command-log-mode)
    (add-hook 'python-mode-hook 'command-log-mode)
    (add-hook 'org-mode-hook 'command-log-mode)
    (add-hook 'emacs-lisp-mode-hook 'command-log-mode)
    (add-hook 'text-mode-hook 'command-log-mode))

  ;; ;; to change highlight of the selection
  ;; (set-face-attribute 'region nil :background "#ffff00")

  ;; ;; to change the background, sometimes eyes are really tired
  ;; (set-background-color "LightGoldenrod3")
  ;; ;;(set-background-color "LightCyan3")
#+END_SRC

@simon: do not forget to:  =sh config-me.sh=

@simon: do not forget to turn-on =command-log-mode= :-)

**** Show me                                               :LIVE:noexport:

1. Create =~/.emacs.d= then Copy =init.el= into it
2. Open Emacs: it is downloading everything
3. Setup done. Happy hacking!
4. Close Emacs and restart it
5. It warns about Reveal.js
   - Turn off in init.el
   - Or clone it
6. Let's go!

*** latex-mode

#+BEGIN_SRC text
  # apt-get install aspell
#+END_SRC

#+BEGIN_SRC latex :tangle (prog1 "eg/tex/article.tex" (make-directory "eg/tex" ".")) :exports none
  \documentclass[11pt]{article}
  \usepackage[utf8]{inputenc}
  \usepackage[T1]{fontenc}
  \usepackage{amsmath,amssymb,amsfonts}

  \author{John Doe}
  \date{\today}
  \title{Materials from IEEE Author package}

  \begin{document}
  \maketitle

  \begin{abstract}
  These instructions give you guidelines for preparing papers for
  IEEE Transactions and Journals. Use this document as a template if you are
  using \LaTeX. Otherwise, use this document as an
  instruction set. The electronic file of your paper will be formatted further
  at IEEE. Paper titles should be written in uppercase and lowercase letters,
  not all uppercase.
  \end{abstract}


  \section{Introduction}
  \label{sec:introduction}

  If your paper is intended for a conference, please contact your
  conference editor concerning acceptable word processor formats for your
  particular conference. IEEE will do the final formatting of your
  paper. If your paper is intended for a conference, please observe the
  conference page limits.


  \subsection{Abbreviations and Acronyms}
  \label{sec:abrev}

  Define abbreviations and acronyms the first time they are used in the text,
  even after they have already been defined in the abstract. Abbreviations
  such as IEEE, SI, ac, and dc do not have to be defined. Abbreviations that
  incorporate periods should not have spaces: write ``C.N.R.S.,'' not ``C. N.
  R. S.'' Do not use abbreviations in the title unless they are unavoidable
  (for example, ``IEEE'' in the title of this article).

  The Stoke's theorem reads,
  \begin{equation}
    \label{eq:beautiful}
    \int_{\partial\Omega} \omega = \int_\Omega d\omega
  \end{equation}
  which means,
  \begin{equation}
    \label{sec:ugly}
    \int_\Gamma \mathbf{F}\cdot d\mathbf{\Gamma}
    =
    \int\int_S \nabla\times\mathbf{F}\cdot dS
  \end{equation}
  and everybody uses it because it rocks!


  \subsection{Other Recommendations}
  \label{sec:reco}

  Use one space after periods and colons. Hyphenate complex modifiers:
  ``zero-field-cooled magnetization.'' Avoid dangling participles, such as,
  ``Using \eqref{eq:einstein}, the potential was calculated.'' [It is not clear who or what
  used \eqref{eq:einstein}.] Write instead, ``The potential was calculated by using \eqref{eq:einstein},'' or
  ``Using \eqref{eq:einstein}, we calculated the potential.''


  \section{Where I type stuff}
  \label{sec:my-stuff}

  Number equations consecutively with equation numbers in parentheses
  flush with the right margin, as in \eqref{eq:einstein}. Punctuate
  equations when they are part of a sentence, as in
  \begin{equation}\label{eq:einstein}
    E=mc^2.
  \end{equation}
  Then do not forget to cite \cite{Saad2002_book}.

  \subsection{The table part}
  \label{sec:fig}

  Be aware of the different meanings of the homophones ``affect'' (usually a
  verb) and ``effect'' (usually a noun), ``complement'' and ``compliment,''
  ``discreet'' and ``discrete,'' ``principal'' (e.g., ``principal
  investigator'') and ``principle'' (e.g., ``principle of measurement''). Do
  not confuse ``imply'' and ``infer.'' See \cite{getdp-ieee1999}.
  \begin{table}[!h]
    \centering
    \caption{My table}
    \label{tab:student}
    \begin{tabular}{ll|c}
      Name & City & Editor \\
      \hline
      Berty & Vesouls & VSCode \\
      Simon & Montbazens & Emacs \\
      You & Paris & Emacs?
    \end{tabular}
  \end{table}
  Prefixes such as ``non,'' ``sub,'' ``micro,'' ``multi,'' and ``ultra'' are
  not independent words; they should be joined to the words they modify,
  usually without a hyphen. There is no period after the ``et'' in the Latin
  abbreviation ``\emph{et al.}'' (it is also italicized). The abbreviation ``i.e.,'' means
  ``that is,'' and the abbreviation ``e.g.,'' means ``for example'' (these
  abbreviations are not italicized).


  \subsection{Other stuff}
  \label{sec:other}

  Please use ``soft'' (e.g., \verb|\eqref{eq:einstein}|) cross references instead
  of ``hard'' references (e.g., \verb|(1)|). That will make it possible
  to combine sections, add equations, or change the order of figures or
  citations without having to go through the file line by line.

  \bibliographystyle{plain}
  \bibliography{the}

  \end{document}
#+END_SRC
#+BEGIN_SRC bibtex :tangle eg/tex/the.bib :exports none
  @Misc{getdp,
    author = {P. Dular and C. Geuzaine},
    title  = {{GetDP} Reference Manual: The Documentation For {GetDP}, A General Environment For The Treatment Of Discrete Problems},
    note   = {\url{http://www.geuz.org/getdp/}},
  }

  @Article{getdp-ieee1999,
    author  = {P. Dular and C. Geuzaine and A. Genon and W. Legros},
    title   = {An Evolutive Software Environment For Teaching Finite Element Methods In Electromagnetism},
    journal = {IEEE Transactions on Magnetics},
    year    = {1999},
    volume  = {35},
    number  = {3},
    pages   = {1682--1685},
    month   = may,
  }

  @Article{Geuzaine2009,
    author    = {C. Geuzaine and J.-F. Remacle},
    title     = {Gmsh: A Three-dimensional Finite Element Mesh Generator With Built-in Pre- And Post-processing Facilities},
    journal   = {International Journal for Numerical Methods in Engineering},
    year      = {2009},
    volume    = {79},
    number    = {11},
    pages     = {1309--1331},
    abstract  = {Gmsh is an open-source 3-D finite element grid generator with a build-in CAD engine and post-processor. Its design goal is to
                    provide a fast, light and user-friendly meshing tool with parametric input and advanced visualization capabilities. This
                    paper presents the overall philosophy, the main design choices and some of the original algorithms implemented in Gmsh},
    doi       = {DOI: 10.1002/nme.2579\`a},
    owner     = {simon},
    timestamp = {2014.05.18},
  }

  @Book{Saad2002_book,
    title     = {Iterative Methods For Sparse Linear Systems},
    publisher = {Society for Industrial Mathematics},
    year      = {2002},
    author    = {Saad, Y.},
    edition   = {Second},
    abstract  = {Since the first edition of this book was published in 1996, tremendous progress has been made in the scientific and
                    engineering disciplines regarding the use of iterative methods for linear systems. The size and complexity of the new
                    generation of linear and nonlinear systems arising in typical applications has grown. Solving the three-dimensional models
                    of these problems using direct solvers is no longer effective. At the same time, parallel computing has penetrated these
                    application areas as it became less expensive and standardized. Iterative methods are easier than direct solvers to
                    implement on parallel computers but require approaches and solution algorithms that are different from classical
                    methods. Iterative Methods for Sparse Linear Systems, Second Edition gives an in-depth, up-to-date view of practical
                    algorithms for solving large-scale linear systems of equations. These equations can number in the millions and are sparse
                    in the sense that each involves only a small number of unknowns. The methods described are iterative, i.e., they provide
                    sequences of approximations that will converge to the solution. This new edition includes a wide range of the best methods
                    available today. The author has added a new chapter on multigrid techniques and has updated material throughout the text,
                    particularly the chapters on sparse matrices, Krylov subspace methods, preconditioning techniques, and parallel
                    preconditioners. Material on older topics has been removed or shortened, numerous exercises have been added, and many
                    typographical errors have been corrected. The updated and expanded bibliography now includes more recent works emphasizing
                    new and important research topics in this field. Audience This book can be used to teach graduate-level courses on
                    iterative methods for linear systems. Engineers and mathematicians will find its contents easily accessible, and
                    practitioners and educators will value it as a helpful resource. The preface includes syllabi that can be used for either
                    a semester- or quarter-length course in both mathematics and computer science. Contents Preface to the Second Edition;
                    Preface to the First Edition; Chapter 1: Background in Linear Algebra; Chapter 2: Discretization of Partial Differential
                    Equations; Chapter 3: Sparse Matrices; Chapter 4: Basic Iterative Methods; Chapter 5: Projection Methods; Chapter 6:
                    Krylov Subspace Methods, Part I; Chapter 7: Krylov Subspace Methods, Part II; Chapter 8: Methods Related to the Normal
                    Equations; Chapter 9: Preconditioned Iterations; Chapter 10: Preconditioning Techniques; Chapter 11: Parallel
                    Implementations; Chapter 12: Parallel Preconditioners; Chapter 13: Multigrid Methods; Chapter 14: Domain Decomposition
                    Methods; Bibliography; Index.},
    file      = {Saad2002_book.pdf:pdf/book/Saad2002_book.pdf:PDF},
    owner     = {tournier},
    timestamp = {2011.03.23},
  }
#+END_SRC

**** Config                                              :config:noexport:

#+NAME: config-latex
#+BEGIN_SRC elisp
  ;;;;
  ;;
  ;; TeX/LaTeX configuration
  ;;
  ;; be careful, the names of the modes are a bit a messy
  (use-package tex-mode
    :defer t
    :config
    ;; automatically bound paragraph length
    (add-hook 'latex-mode-hook 'turn-on-auto-fill)
    ;; turn on the nice RefTeX package
    (add-hook 'latex-mode-hook 'turn-on-reftex))

  ;; compilation show first the first error
  ;; instead of the end of the compilation buffer
  (setq compilation-scroll-output 'first-error)

  ;; mispelling correction using dictionary
  (use-package ispell
    :defer t
    :config
    ;; you need to install the program aspell
    (setq-default ispell-program-name "aspell"))
  #+END_SRC

**** Show me                                               :LIVE:noexport:
:PROPERTIES:
:CUSTOM_ID: latex
:END:

- Insert environment =C-c C-o= equation, table, tabular, figure
- RefTeX =C-c ==
- Insert stuff =C-c )=
- Insert citation from the.bib =C-c [=
- Compile all
  1. Compile [pdflatex] =C-c C-c=
  2. Compile again if require =C-c C-c=
  3. Compile bibtex =C-c TAB=
  4. Compile =C-c C-c= and try again
  5. Display the PDF? Again =C-c C-c=
- Spell word =M-$=
- Spelling corrector =C-$= (=M-x ispell-change-dictionary=)
- Close the file
- Install Auc\TeX: =M-x package-list-packages=
  then =C-u C-s ^  auctex= and =i x=.
  It is =^= two spaces =auctex=.
  The character =^= means for regexp: beginning of the line.
- Reopen the file
- Insert section =C-c C-s TAB=
- Insert environement =C-c C-e TAB=
- Completion =M-TAB=
- Preview on/off at Point (GUI)
- GUI LaTeX->Show/Hide->

*** python-mode

#+BEGIN_SRC text
  # apt-get install virtualenv ipython
  $ pip install jedi epc pylint --user
#+END_SRC

**** Config                                              :config:noexport:

#+NAME: config-python
#+BEGIN_SRC elisp
  ;;;;
  ;;
  ;; Python configuration
  ;;
  ;; better interface to imenu
  (use-package idomenu
    :ensure t
    :bind ("C-c i" . idomenu))

  (use-package direx
    :ensure t
    :defer t)

  (use-package jedi-direx
    :ensure t
    :defer t)

  (use-package jedi
    :ensure t
    :defer t
    :init
    (setq
     py-electric-colon-active t
     py-smart-indentation t)

    ;; I do not understand well the Jedi's config
    (require 'jedi-direx)

    (setq jedi:complete-on-dot t)
    (setq  jedi:setup-keys t)
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook
              (lambda ()
                (local-set-key "\C-ch" 'jedi:show-doc)
                (local-set-key "\C-cg" 'jedi:goto-definition)
                (local-set-key "\C-cd" 'jedi-direx:pop-to-buffer)))
    (add-hook 'jedi-mode-hook 'jedi-direx:setup))

  ;; switch to IPython because it rocks!
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython")
    (setq python-shell-interpreter-args "--simple-prompt"))


  (use-package yasnippet
    :ensure t
    :defer t
    :init
    (yas-global-mode 1)
    :config
    (yas-global-mode 1))

  (use-package yasnippet-classic-snippets
    :ensure t
    :defer t)
  (use-package yasnippet-snippets
    :ensure t
    :defer t)
#+END_SRC

#+BEGIN_SRC text :tangle (prog1 "eg/snippets/python-mode/licence" (make-directory "eg/snippets/python-mode" "."))
  # -*- mode: snippet -*-
  # name: licence
  # key: gpl...
  # --
  # coding: utf-8
  #
  #
  # Copyright 2018 John Doe
  #
  # This program is free software: you can redistribute it and/or modify
  # it under the terms of the GNU General Public License as published by
  # the Free Software Foundation, either version 3 of the License, or
  # (at your option) any later version.
  #
  # This program is distributed in the hope that it will be useful,
  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  # GNU General Public License for more details.
  #
  # You should have received a copy of the GNU General Public License
  # along with this program.  If not, see <https://www.gnu.org/licenses/>.
#+END_SRC
#+BEGIN_SRC text :tangle "eg/snippets/python-mode/def"
  # -*- coding: utf-8 -*-
  # -*- mode: snippet -*-
  # name: def
  # key: def...
  # --
  def ${1:fname}(${2:args}):
      """
      The well written doc !
  """
      $0
#+END_SRC
#+BEGIN_SRC text :tangle "eg/snippets/python-mode/import"
    # -*- coding: utf-8 -*-
    # -*- mode: snippet -*-
    # name: num...
    # key: num...
    # --

    import numpy as np
    import matplotlib.pyplot as plt
    import scipy.linalg as la
#+END_SRC

**** Show me                                               :LIVE:noexport:

- imenu =C-c C-j=
- =M-x indent-rigidly=
- Yasnippet

* More features (demo)

- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]]: file manager / directory editor
- [[https://www.gnu.org/software/emacs/manual/html_node/ediff/][EDiff]]: diff, merge files
  #+NAME: ediff
  #+BEGIN_SRC elisp :exports none
    ;; change the split of ediff
    ;; better tiling
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  #+END_SRC
- [[https://magit.vc][Magit]]: A Git [[https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain][porcelain]]
  #+NAME: magit
  #+BEGIN_SRC elisp :exports none
    ;; Git porcelain with Magit
    (use-package magit
      :ensure t
      :defer t
      :bind ("C-x g" . magit-status))
  #+END_SRC
- [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][EShell]]/[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Term-Mode.html][term]]: yes litterally LIVE inside Emacs ;-)
- minor modes: =whitespace-mode=, =glasses-mode=, etc.
- =find-grep=, [[http://ergoemacs.org/emacs/emacs_regex.html][regular expression]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html][Remote files with TRAMP]] (edit file through ssh)
- Helm / Company
- ...

**** Show me                                               :LIVE:noexport:
:PROPERTIES:
:CUSTOM_ID: misc
:END:

- Dired =C-x C-d=
  + Open the help: =C-h m=
  + create directory
  + copy, rename file
  + edit name =C-x C-q= then =C-c C-c=
  + mark files and copy them to subfolder
- EDiff
  #+BEGIN_SRC latex :tangle "eg/tex/article-modif.tex" :exports none

    \documentclass[11pt]{article}
    \usepackage[utf8]{inputenc}
    \usepackage[T1]{fontenc}
    \usepackage{amsmath,amssymb,amsfonts}

    \author{John Doe}
    \date{\today}
    \title{Materials from IEEE Author package}

    \begin{document}
    \maketitle

    \begin{abstract}
    These instructions give you guidelines for preparing manuscripts for
    IEEE Transactions and Journals. Use this document as a template if you are
    using \LaTeX. Otherwise, use this document as an
    instruction set. The file of your manuscript will be formatted further
    at IEEE. Manuscript titles should be written in uppercase and lowercase letters,
    not all uppercase.
    \end{abstract}


    \section{Introduction}
    \label{sec:introduction}

    If your manuscript is intended for a conference, please contact your
    conference editor concerning acceptable word processor formats for your
    particular conference. IEEE will do the final formatting of your
    manuscript. If your manuscript is intended for a Conference, please observe the
    conference page limits.


    \subsection{Abbreviations and Acronyms}
    \label{sec:abrev}

    Define abbreviations and acronyms the first time they are used in the text,
    even after they have already been defined in the abstract. Abbreviations
    incorporate periods should not have spaces: write ``C.N.R.S.,'' not ``C. N.
    R. S.'' Do not use abbreviations in the title unless they are unavoidable
    (for example, ``IEEE'' in the title of this article).

    The Stoke's theorem reads,
    \begin{equation}
      \label{eq:beautiful}
      \int_{\partial\Omega} \omega = \int_\Omega d\omega
    \end{equation}
    which means,
    \begin{equation}
      \label{sec:ugly}
      \int_\Gamma \mathbf{F}\cdot d\mathbf{\Gamma}
      =
      \int\int_S \nabla\times\mathbf{F}\cdot dS
    \end{equation}
    and everybody uses it because it rocks!


    \subsection{Other Recommendations}
    \label{sec:reco}

    Use one SPACE after periods and colons. Hyphenate complex modifiers:
    ``zero-field-cooled magnetization.'' Avoid dangling participles, such as,
    ``Using \eqref{eq:einstein}, the potential was calculated.'' [It is not clear who or what
    used \eqref{eq:einstein}.] Write instead, ``The potential was calculated by
    using \eqref{eq:einstein},'' or
    ``Using \eqref{eq:einstein}, we calculated the potential.''


    \section{Where I type stuff}
    \label{sec:my-stuff}

    Number equations consecutively with equation numbers in parentheses
    flush with the right margin, as in \eqref{eq:einstein}. Punctuate
    equations when they are part of a sentence, as in
    \begin{equation}\label{eq:einstein}
      E=mc^2.
    \end{equation}
    Then do not forget to cite \cite{Saad2002_book}.

    \subsection{The table part}
    \label{sec:fig}

    Be aware of the different meanings of the homophones ``affect'' (usually a
    verb) and ``effect'' (usually a noun), ``complement'' and ``compliment,''
    ``discreet'' and ``discrete,'' ``principal'' (e.g., ``principal
    investigator'') and ``principle'' (e.g., ``principle of measurement''). Do
    not confuse ``imply'' and ``infer.'' See \cite{getdp-ieee1999}.
    \begin{table}[!h]
      \centering
      \caption{My table}
      \label{tab:student}
      \begin{tabular}{ll|c}
        Name & City & Editor \\
        \hline
        Berty & Vesouls & VSCode \\
        Simon & Montbazens & Emacs \\
        You & Paris & Emacs?
      \end{tabular}
    \end{table}
    Prefixes such as ``non,'' ``sub,'' ``micro,'' ``multi,'' and ``ultra'' are
    not independent words; they should be joined to the words they modify,
    usually without a hyphen. There is no period after the ``et'' in the Latin
    abbreviation ``\emph{et al.}'' (it is also italicized). The abbreviation ``i.e.,'' means
    ``that is,'' and the abbreviation ``e.g.,'' means ``for example'' (these
    abbreviations are not italicized).


    \subsection{Other stuff}
    \label{sec:other}

    Please use ``soft'' (e.g., \verb|\eqref{eq:einstein}|) cross references instead
    of ``hard'' references (e.g., \verb|(1)|). That will make it possible
    to combine sections, add equations, or change the order of figures or
    citations without having to go through the file line by line.

    \bibliographystyle{plain}
    \bibliography{the}

    \end{document}
  #+END_SRC
  + =M-x ediff-files=
  + Choose =eg/tex/article.tex=
  + Then choose =eg/tex/article-modif.tex=
  + Press =n= to visualize the next diff
  + Or press =p= to visualize the previous diff
  + Help with =h=
- List all the buffers open =C-x C-b=
- Open a file under Git then =M-x magit= / =C-x g=
- Add spaces everywhere in the file
  then =M-x mode-whitespace=
- Terminal: =M-x term= then full terminal
  + Emacs behavior =C-c C-j= (then e.g. =C-h m=)
  + Complet terminal =C-c C-k= (Control acts as in all regular terminal)
  + Reset Control acts as expected by Emacs =C-c C-j=
  - EShell is like IPython for Emacs and Elisp
    =M-x eshell=

    [[http://www.howardism.org/Technical/Emacs/eshell-present.html][=www.howardism.org/Technical/Emacs/eshell-present.html=]]
- Change tabs vs space convention (python) =M-x tabify=
- Select region then =M-x indent-rigidly= then =Shift-<arrow>=

* Another killer feature: Org-mode

* [[https://orgmode.org][org-mode]] is...

# John Kitchin: Scimax and Python dev. Book
#+BEGIN_QUOTE
"[[https://www.youtube.com/watch?v=fgizHHd7nOo][Awesome!]]" -- [[https://github.com/jkitchin/dft-book][John Kitchin]] (video)
#+END_QUOTE

- Markup language (see the backstage of this presentation)
- Note-taking utility
- TODO lists maintainer
- Planner, agenda
- Tables editor
- Helper to  manage your projects ([[https://blog.fugue.co/2015-11-11-guide-to-emacs.html][CEO]] explains his [[https://blog.fugue.co/2015-11-11-guide-to-emacs.html][experience]])
- included by default since Emacs 22 (2006)

*** Org is vast...

... *start small!*

#+BEGIN_QUOTE
"Don't try to set up the 'final' task managing system from the
start.  Because you have no idea yet what your system should look
like.
[...]
Start by creating and managing a small TODO list and
then develop your own system as the needs arises." -- [[http://lists.gnu.org/archive/html/emacs-orgmode/2008-04/msg00009.html][Carsten Dominik]]
(creator of org)
#+END_QUOTE

*** My experience

- Learn a couple of its capabilities
- Integrate them into your workflow
- You’ll find yourself thinking, "Hum?, it would be nice if I
  could X"
- Then check the manual, browse the web

... and, in fact, Org can do X

*** Demo

**** Show me                                               :LIVE:noexport:
:PROPERTIES:
:CUSTOM_ID: org
:END:

- Markup:
  + _underline_: _
  + *bold*: *
  + /italic/: /
  + =verbatim=: =
  + ~code~: ~
  + +strike+: +
  + list, section, link
- =C-c C-n= /C-p
- =C-c C-u= (upper header)
- =C-c C-j= (interresting move)
- Move =M-up= =M-down=
- =M-left= =M-right=
- =M-S-left= right (item)
- =C-c - =(change item kind)
- =C-c ^= (sort)
- Tags: search =C-c / m=

*** table and $\LaTeX$

- Write table with Org-mode (easy!)
- Export to =.tex=: =C-c C-e C-b l l= (body only)
- Use =\input{}=

(or epxort to buffer =C-c C-e C-b l L= and copy/paste)

#+BEGIN_QUOTE
DEMO!
#+END_QUOTE

#+BEGIN_SRC text :tangle (prog1 "eg/tex-org/doc.tex" (make-directory "eg/tex-org" ".")) :exports none
  \documentclass[11pt]{article}
  \usepackage[utf8]{inputenc}
  \usepackage[T1]{fontenc}

  \begin{document}


  \TeX{} is a typesetting computer program created by \emph{Donald Knuth},
  originally for his magnum opus, \textsf{The Art of Computer
    Programming}.It takes a "plain" text file and converts it into a
  high-quality document for printing or on-screen viewing.

  \LaTeX{} is a macro system built on top of \TeX{} that aims to simplify its
  use and automate many common formatting tasks. It is the de-facto
  standard for academic journals and books, and provides some of the best
  typography free software has to offer.

  \input{table1.tex}

  \emph{Leslie B. Lamport} (born February 7, 1941) is an American computer
  scientist. Lamport is best known for his seminal work in distributed
  systems and as the initial developer of the document preparation system
  \LaTeX. He was the winner of the 2013 Turing Award for imposing clear,
  well-defined coherence on the seemingly chaotic behavior of distributed
  computing systems, in which several autonomous computers communicate
  with each other by passing messages. He devised important algorithms and
  developed formal modeling and verification protocols that improve the
  quality of real distributed systems. These contributions have resulted
  in improved correctness, performance, and reliability of computer
  systems.

  \begin{table}[h]
    \input{table2.tex}
    \caption{A nice \textsc{Table}}
  \end{table}


  \end{document}
#+END_SRC
#+BEGIN_SRC text :tangle eg/tex-org/table1.org :exports none
  ,#+BEGIN_SRC text :exports none
    # Explanations not exported
    # Export this table with the sequence
    C-c C-e C-b l l
    using the Body Only option
  ,#+END_SRC


  |    a |    b |
  |------+------|
  |   11 |    2 |
  |  333 | 4444 |
  |    5 |  666 |
  | 7777 |   88 |
#+END_SRC
#+BEGIN_SRC text :tangle eg/tex-org/table2.org :exports none
# -*- mode: org ; coding: utf-8 -*-


#+ATTR_LATEX: :align |c|l|
|------+------|
|    a |   bb |
|------+------|
|------+------|
|   11 |    2 |
|  333 | 4444 |
|    5 |  666 |
| 7777 |   88 |
|------+------|
#+END_SRC

*** makefile

# WARNING: tab is lost after C-' edit C-c C-c
# Fix: select area then M-x tabify
#+BEGIN_SRC makefile :tangle eg/tex-org/Makefile
  all: doc.tex table1.tex table2.tex
	  pdflatex doc.tex

  %.tex: %.org
	   emacs -batch -q $< --eval="(org-latex-export-to-latex nil nil t t)"

  clean:
	  -rm table?.tex
	  -rm doc.{aux,log}
#+END_SRC

*** Ressources

- [[https://orgmode.org/worg/org-tutorials/org4beginners.html][Org for beginners]]
- [[http://pragmaticemacs.com/org-mode-tutorials/][A tutorial/blog]]
- [[https://orgmode.org/worg/org-tutorials/org-screencasts/org-mode-google-tech-talk.html#sec-2][Google Tech Talk]] by Carsten Dominik (video)
- [[https://www.jstatsoft.org/article/view/v046i03][Original Paper]] (2012)
- [[https://youtube.com/watch?v=SzA2YODtgK4][Getting Started with Org-mode]] by New-York Emacs meetup (video)
- [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][An implementation: Org-mode + GTD]]

*** Computational Document / Reproducible workflow

#+BEGIN_QUOTE
"Buzzword -- What'chu talkin' 'bout, Willis?" -- Arnold
#+END_QUOTE
- [[https://orgmode.org/worg/org-contrib/babel/uses.html#sec-6][Org-Babel]]
- [[https://hal.inria.fr/hal-01112795][An Effective Git And Org-Mode Based Workflow For Reproducible Research]]
- [[http://kieranhealy.org/files/misc/workflow-apps.pdf][Choosing your Workflow Applications]]
- [[http://kitchingroup.cheme.cmu.edu/scimax][Scimax]] by John Kitchin
- [[https://youtube.com/watch?v=1-dUkyn_fZA][Emacs + Org-mode + Python = reproducible research]] (video)

* Emacs Lisp

** Lisp? Really?!?

*** Lisp is (Lots of ((Irritating, Spurious) (Parentheses)))

https://imgs.xkcd.com/comics/lisp_cycles.png
# http://vintage-digital.com/hefner/misc/lisp-programmers.jpg

*** Lisp? tell me more...

First appeared 1958; 60 years ago

#+BEGIN_QUOTE
"A bad workman blames his tools." -- Barack Obama
#+END_QUOTE
#+BEGIN_QUOTE
"Another language is a new life." -- Persian proverb

"Learn a language, and you will avoid a war." -- Arab proverb
#+END_QUOTE

*** Hacker ([[https://en.wikipedia.org/wiki/Paul_Graham_(programmer)][Paul Graham]]) citing Hacker ([[https://en.wikipedia.org/wiki/Eric_S._Raymond][Eric S. Raymond]]): More [[http://www.paulgraham.com/avg.html][here]], [[http://www.paulgraham.com/diff.html][here]] or [[http://www.paulgraham.com/quotes.html][here]].

#+BEGIN_QUOTE
Finally, the truly serious hacker should consider learning Lisp:

Lisp is worth learning for the profound enlightenment experience you
will have when you finally get it; that experience will make you a
better programmer for the rest of your days, even if you never actually
use Lisp itself a lot.

This is the same argument you tend to hear for learning Latin.
#+END_QUOTE

More [[http://www.paulgraham.com/avg.html][here]], [[http://www.paulgraham.com/diff.html][here]] or [[http://www.paulgraham.com/quotes.html][here]].

*** True!

# https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-AIiEDE1lQCxWKMtrQYRBoWQ5K09YW99RgXb-upyAVJDB6YQ3OQ
https://media.giphy.com/media/maIEBUU5OmrMA/giphy-facebook_s.jpg

*** Old pot, good jam

- [[https://julialang.org/blog/2012/02/why-we-created-julia][Julia]] uses lisp (parser; try: =julia --lisp=) and lot of concepts
  ([[https://docs.julialang.org/en/v1/manual/metaprogramming/index.html][metaprogramming]])

  See [[https://www.youtube.com/watch?v=dK3zRXhrFZY][Julia: to Lisp or not to Lisp?]] (video)
- R is [[https://www.stat.auckland.ac.nz/%257Eihaka/downloads/JSM-2010.pdf][rooted]] in [[https://www.stat.auckland.ac.nz/%257Eihaka/downloads/Compstat-2008.pdf][lisp]]
# (two historical papers about its design)
- [[http://docs.hylang.org/en/stable/][Hy]]: [[https://www.youtube.com/watch?v=1vui-LupKJI#t=16m14s][lisp-flavored Python]] or python-flavored Lisp ? (video)
- [[https://www.gnu.org/software/guix/][GNU Guix]]: a transactional package manager /fully reproducible/;
  Supported by [[https://guix-hpc.bordeaux.inria.fr/about][INRIA Bordeaux]].
- [[https://clojure.org][Clojure]]: Java-world (JVM)
- [[https://common-lisp.net][Common Lisp]]:
  + [[http://maxima.sourceforge.net][Maxima]] a Computer Algebra System
  + Dimitri [[https://blog.journalduhacker.net/index.php?article30/entretien-avec-dimitri-fontaine-developpeur-postgresql][Fontaine]] rewrote PostgreSQL [[https://pgloader.io][loader]]
- [[https://en.wikipedia.org/wiki/AutoLISP][AutoLisp]]: AutoCAD

** Emacs Lisp (ELisp) Ressources

- https://www.gnu.org/software/emacs/manual/eintr.html
- [[http://ergoemacs.org/emacs/elisp.html][http://ergoemacs.org/emacs/elisp.html]]
- [[https://learnxinyminutes.com/docs/fr-fr/elisp-fr/][https://learnxinyminutes.com/docs/fr-fr/elisp-fr/]]

  by Bastien Guerry (Org-mode maintainer)
- [[http://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley/][Emacs Lisp Dev. Tips]] by John Wiegley (GNU Emacs maintainer) (video)

** Basics

#+NAME: config-lisp
#+BEGIN_SRC elisp
  ;; work with parenthesis
  (show-paren-mode 1)       ; highlight matching parens
  (electric-pair-mode 1)    ; open-close parens
#+END_SRC
- Start REPL
   #+BEGIN_QUOTE
   =M-x ielm=
   #+END_QUOTE

- Eval in mini-buffer: =M-:=
- Buffer with =M-x emacs-lisp-mode=
   #+BEGIN_QUOTE
   =C-x C-e=
   #+END_QUOTE

  end of S-expression

*** Basics 1

#+BEGIN_SRC elisp :tangle eg/elisp/modif-me.el
  ;; Declare variable
  (setq x 1)

  ;; Compute (infix)
  (+ x 42)
  (* x 4.2)

  ;; List (linked)
  (setq ll (list 1 2 3 4))
  ;; First element (head)
  (car ll)
  ;; Rest (tail)
  (cdr ll)
  ;; Concatenate lists
  (append ll (list 11 22 33 44 55) (list "a" "bb" "ccc"))
#+END_SRC

*** Basics 2

Function
#+BEGIN_SRC elisp :tangle eg/elisp/modif-me.el
  (defun hello-world (name)
    "Simply Hello World function.

  Do stuff.
  And other stuff.
  The argument name provides a name to helloing."
    (message "Hello World: %s!" name))
#+END_SRC
Anonymous function
#+BEGIN_SRC elisp
  (lambda (name)
    (message "Hello: %s!" name))
#+END_SRC

Call/Apply a function: =(hello-world "Dude")=

*** Basics 3

#+BEGIN_SRC elisp :noweb yes :tangle eg/elisp/modif-me.el
<<ask-at-point>>
#+END_SRC

*** All the Lisp power at your fingertips

https://sayingimages.com/wp-content/uploads/minion-awesome-quote.jpg

** Emacs is just a Lisp machine

- Few built-in functions coded in C

  =C-h f list= or car, cdr, etc.
- And *lot of* Emacs Lisp ones

  =C-h f ibuffer= or find-file, dired, org, etc.

#+BEGIN_QUOTE
Read manual then read code on [[https://elpa.gnu.org][ELPA]] and [[https://melpa.org/#/][MELPA]]
#+END_QUOTE
e.g., eshell
*** MIT museum

https://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/MIT_lisp_machine.jpg/1836px-MIT_lisp_machine.jpg

** Simple functions

*** Upcase a word

#+BEGIN_SRC elisp :tangle eg/elisp/case-word.el
  (defun eg/upcase-word ()
    "Change from any word to UPPERCASE."
    (interactive)
    (let ((beg (progn
                 (backward-word)
                 (point)))
          (end (progn
                 (forward-word)
                 (point))))
          (upcase-region beg end)))
#+END_SRC

*** Next!

#+BEGIN_SRC elisp
  (global-set-key (kbd "M-u") 'my/upcase-word)
#+END_SRC
#+BEGIN_CENTER
What about Downcase ?
#+END_CENTER
#+BEGIN_SRC elisp :tangle eg/elisp/case-word.el
  (defun eg/downcase-word ()
    "Change from any word to DOWNCASE."
    (interactive)
    (let ((beg (progn
                 (backward-word)
                 (point)))
          (end (progn
                 (forward-word)
                 (point))))
          (downcase-region beg end)))
#+END_SRC

*** Pattern ?

http://mathandmultimedia.com/wp-content/uploads/2010/11/amazing1.png

*** Refactor
#+BEGIN_SRC elisp :tangle init.el :exports none
  ;;;;
  ;;
  ;; HOW TO write simple functions to adapt the tool
  ;;
#+END_SRC
#+BEGIN_SRC elisp :tangle init.el
  (defun eg/change-case-word (fun)
    "Generic function to change the case of a word.

  When the `point' is somewhere in word, first get the `backward-word'
  position, second get the `forward-line' position, and last apply FUN
  to these both."
    (interactive)
    (let ((beg (progn
                 (backward-word)
                 (point)))
          (end (progn
                 (forward-word)
                 (point))))
          (funcall fun beg end)))
#+END_SRC

*** Simple, isn't?

#+BEGIN_SRC elisp :tangle init.el
(defun eg/capitalize-word ()
  "Remap of `capitalize-word'."
  (interactive)
  (eg/change-case-word 'capitalize-region))

(defun eg/upcase-word ()
  "Remap of `upcase-word'."
  (interactive)
  (eg/change-case-word 'upcase-region))

(defun eg/downcase-word ()
  "Remap of `downcase-word'."
  (interactive)
  (eg/change-case-word 'downcase-region))

;; add quick bindings to the new nice functions
(global-set-key (kbd "M-c") 'eg/capitalize-word)
(global-set-key (kbd "M-u") 'eg/upcase-word)
(global-set-key (kbd "M-l") 'eg/downcase-word)
#+END_SRC

** Count Words

Tutorial from VSCode to extend it

https://code.visualstudio.com/docs/extensions/example-word-count

#+BEGIN_QUOTE
Come on! It is not simpler than X.
#+END_QUOTE

(me: javascript is aweful)

*** Hum?

#+BEGIN_QUOTE
M-=
#+END_QUOTE
or
#+BEGIN_QUOTE
M-x count-words-region
#+END_QUOTE

*** Ok, do naive way!

#+BEGIN_SRC elisp :tangle init.el
  (defun eg/count-words-region (start end)
    "Count words in the selected region.

  Worse than `count-words-region'."
    (interactive "r")
    (let ((count-words->how-many 0))
      (goto-char start)
      (while (< (point) end)
        (if (forward-word 1)
            (setq count-words->how-many (1+ count-words->how-many))))

      (message "Region has %d words." count-words->how-many)
      count-words->how-many))
#+END_SRC
#+BEGIN_QUOTE
M-x eg/count-words-region
#+END_QUOTE

** mini-fem solver with ELisp

Let only consider:
- =list= and the 4 arithmitic operations on integers and floats
- functions and recurcivity
$$\cos(x) = \textrm{real}~ \sum_n \frac{ix}{n!}$$

\begin{array}{ccl}
u^{\prime\prime} + k^2 u &=& 0 \\
& \textrm{with} &
u(0) = 1 \\
& \textrm{and} &
u^\prime(1)=iku(1)
\end{array}

*** Demo

see https://github.com/zimoun/elfem1

** A bit of elisp history

- [[https://stallman.org/stallman-computing.html][Richard Stallman]] (father of GNU Emacs) speaks about [[https://www.gnu.org/gnu/rms-lisp.en.html][Lisp]]
- Guy Steele (co-"father" of Emacs) still shares [[https://www.youtube.com/watch?v=ftcIcn8AmSY][insights]] (video)
- Stefan Monnier (prev. maint. of GNU Emacs) exposes [[http://www.iro.umontreal.ca/~monnier/hopl-4-emacs-lisp.pdf][internals]]

--

+ [[https://www.emacswiki.org/emacs/GuileEmacs][Guile Emacs]] tries to replace internals by [[https://www.gnu.org/software/guile/][Scheme]]
+ [[https://github.com/Wilfred/remacs][REmacs]] reimplements internals with [[https://www.rust-lang.org/en-US/][Rust]] (instead of C)
*** ELisp is not truly a Lisp?
http://happilyevertinder.com/wp-content/uploads/2017/11/photo-20161216233158566.jpg
*** Facts
- ELisp is  [[https://en.wikipedia.org/wiki/LISP_2][Lisp-2 not Lisp-1]]
- No Tail Call [[https://www.emacswiki.org/emacs/WhyDoesElispSuck][Optimization]]
- [[https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding][Lexical scoping]] introduced lately (Emacs 24 2012)
- Foreign Function Interface ([[https://nullprogram.com/blog/2014/04/26/][FFI]]) with Emacs 25 (2014)
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Threads.html][Concurrency]] introduced with Emacs 26 (2018)
- Simple [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][Garbage Collector]] (mark&sweep)
- and more that I do not understand

*** Lisp-2 vs Lisp-1                                             :noexport:

  1. Naive
     #+begin_src elisp
       (defun f1 (arg)
         (if (listp arg)
             (mapcar (lambda (x) (f1 x)) arg)
           arg))
     #+end_src
  2. Wrong
     #+begin_src elisp
       (defun f2 (arg)
         (if (listp arg)
             (mapcar f2 arg)
           arg))
     #+end_src
     =-> *** Eval error ***  Symbol’s value as variable is void: f2=
  3. Fix
     #+begin_src elisp
       (defun f3 (arg)
         (if (listp arg)
             (mapcar #'f3 arg)
           arg))
     #+end_src
  4. Explanations:
     Elisp is Lisp-2: two namespaces. The function =f2= does not work because
     =mapcar= looks in the variable /table/ and =f2= is not in because it is in
     function /table/. The functions =f1= and =f3= work because... please!

     =#'foo= means =(function foo)= and ='foo= means =(quote foo)=.
     See [[info:elisp#Anonymous%20Functions][Info]] and [[help:function][Help]] documentation.

* What Emacs is ?

#+ATTR_HTML: :width 50%
https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Unico_Anello.png/220px-Unico_Anello.png

* Start now!

https://spaceplace.nasa.gov/review/galactic-explorer/galactic_explorer.en.png

*** Alternative Reality

- [[http://batsov.com/prelude/][Emacs Prelude]]
- [[http://spacemacs.org][Spacemacs]]
- [[http://ergoemacs.github.io][ErgoEmacs]]
- [[http://emacs-bootstrap.com/][Emacs Bootstrap]]
- [[https://www.gnu.org/software/emacs/manual/html_mono/viper.html][Viper]] $\longrightarrow$ [[https://github.com/emacs-evil/evil][Evil]]
- [[https://github.com/technomancy/emacs-starter-kit][Starter Kit]]
- [[https://github.com/jkitchin/scimax][Scimax]]

*** Key of Success

- */Master a tool needs large amount of work/*

  think all the maths you learn before complete non-trivial proofs

- */Master a tool is not easy; otherwise it is a lie/*

  think nunchaku practise to be as efficient as Bruce Lee

#+BEGIN_QUOTE
Why computing tools should be different ?
#+END_QUOTE

[[http://norvig.com/21-days.html][Be good at something is long]]

* My personal conclusion

*** Why flamewar editor ?

- Our daily life is interacting with computers
- We are all differently /wired/
- Cognition is not straightforward

#+BEGIN_QUOTE
Editor should be freedom, not constraint and pain.
#+END_QUOTE

- Editor must help you to [[https://orgmode.org/worg/org-gtd-etc.html][get things done]]
- Emacs pays off ... for me

*** ... because Emacs is the best! ;-)

http://hackles.org/strips/cartoon92.png

* Happy end?

*** Emacs is first at productive procrastination :-)

http://www.phdcomics.com/comics/archive/phd010408s.gif
